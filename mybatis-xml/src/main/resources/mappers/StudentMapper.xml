<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.soft1851.spring.mybatis.mapper.StudentMapper">
    <insert id="insert" parameterType="Student" useGeneratedKeys="true" keyProperty="studentId">
        INSERT INTO t_student (clazz_id, student_name, hometown, birthday)
        VALUES (#{clazzId}, #{studentName}, #{hometown}, #{birthday})
    </insert>

    <delete id="delete" parameterType="int">
        DELETE
        FROM t_student
        WHERE student_id = #{studentId}
    </delete>

    <update id="update" parameterType="Student">
        UPDATE t_student
        SET student_name = #{studentName},
            hometown     = #{hometown},
            birthday     = #{birthday}
        WHERE student_id = #{studentId}
    </update>

    <insert id="batchInsert" parameterType="Student">
        INSERT INTO t_student VALUES
        <foreach collection="students" item="item" index="index" separator=",">
            (
            #{item.studentId}, #{item.clazzId},
            #{item.studentId}, #{item.hometown},
            #{item.birthday}
            )
        </foreach>
    </insert>

    <delete id="batchDelete" parameterType="int">
        DELETE FROM t_student
        WHERE student_id IN
        <foreach item="item" index="index" collection="idList" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>

    <select id="selectLimit" resultType="Student">
        SELECT student_id, clazz_id, student_name, hometown, birthday
        FROM t_student
        WHERE clazz_id = #{clazzId}
#          若要使用变量作为字符串的拼接内容，需要使用 单引号 + ${}
          AND hometown like '%${hometownKey}%'
    </select>

    <update id="batchUpdate" parameterType="java.util.List">
        <foreach collection="students" item="item" index="index" open="" separator=";">
            UPDATE t_student t
            <set>
                t.student_name = #{item.studentName}
            </set>
            WHERE t.student_id = ${item.studentId}
        </foreach>
    </update>

    <select id="selectLimitByDynamicSql" parameterType="Student" resultType="Student">
        SELECT student_id, clazz_id, student_name, hometown, birthday
        FROM t_student

        # 这种写法遵循 “并” 的概念
        <!--        <where>-->
        <!--            <if test="clazzId != null">-->
        <!--                clazz_id = #{clazzId}-->
        <!--            </if>-->
        <!--            <if test="hometown != null">-->
        <!--                AND hometown LIKE "%"#{hometown}"%"-->
        <!--            </if>-->
        <!--            <if test="studentName != null">-->
        <!--                AND student_name LIKE #{studentName}-->
        <!--            </if>-->
        <!--        </where>-->


        # 下面这种写法是选择其中的一项，判断从上至下，顺序执行
        WHERE 1 = 1
        <choose>
            <when test="clazzId != null">
                AND clazz_id = #{clazzId}
            </when>
            <when test="hometown != null">
                AND hometown LIKE "%"#{hometown}"%"
            </when>
            <otherwise>
                AND student_id &gt; ${0}
            </otherwise>
        </choose>
    </select>

    <resultMap type="Student" id="studentMap">
        <id column="student_id" property="studentId"/>
        <result column="student_name" property="studentName"/>
        <result column="hometown" property="hometown"/>
        <result column="birthday" property="birthday"/>
        <association property="clazz" javaType="Clazz">
            <id column="clazz_id" property="clazzId"/>
            <result column="clazz_name" property="clazzName"/>
        </association>
    </resultMap>
    <select id="selectAll" resultMap="studentMap">
        SELECT s.student_id, s.student_name, s.hometown, s.birthday, c.clazz_name
        FROM t_student s
                 RIGHT JOIN t_clazz c
                            ON s.clazz_id = c.clazz_id
        ORDER BY s.birthday DESC
    </select>
</mapper>
